{"ast":null,"code":"var _jsxFileName = \"/Users/eruei/repo/euler/client/src/utils/use-auth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n// from https://usehooks.com/useAuth/\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authContext = /*#__PURE__*/createContext(); // Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\n\nexport function ProvideAuth(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const auth = useProvideAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\n_s(ProvideAuth, \"XNU4Jn8u4aVzJknlKOHFJq03xMo=\", false, function () {\n  return [useProvideAuth];\n});\n\n_c = ProvideAuth;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useProvideAuth() {\n  _s3();\n\n  const [user, setUser] = useState(null);\n\n  const login = (username, password) => {\n    axios.post(process.env.REACT_APP_API_URL + \"/users/login\", {\n      username: username,\n      password: password\n    }, {\n      withCredentials: true\n    }).then(function (response) {\n      // successfully logged in\n      setUser(response.data); // Assign value to a key\n\n      sessionStorage.setItem(\"user\", user);\n      return user;\n    }).catch(function (error) {\n      console.log(\"use-auth: Login Failed\");\n    });\n  };\n\n  const register = (email, password) => {\n    setUser(\"eythor\");\n    return \"\"; //return user\n  };\n\n  const logout = () => {\n    setUser(null);\n    console.log(\"use-auth: logging out\");\n    return \"\";\n  };\n\n  useEffect(() => {\n    console.log(user);\n\n    if (user) {\n      console.log(\"We are logged in\");\n    } else {\n      console.log(\"We are not logged in\");\n    }\n  }, []); // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n  //   useEffect(() => {\n  //     const unsubscribe = unsib((user) => {\n  //       if (user) {\n  //         setUser(user);\n  //       } else {\n  //         setUser(false);\n  //       }\n  //     });\n  //     // Cleanup subscription on unmount\n  //     return () => unsubscribe();\n  //   }, []);\n  // Return the user object and auth methods\n\n  return {\n    user,\n    login,\n    logout,\n    register\n  };\n}\n\n_s3(useProvideAuth, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvideAuth\");","map":{"version":3,"sources":["/Users/eruei/repo/euler/client/src/utils/use-auth.js"],"names":["React","useState","useEffect","useContext","createContext","axios","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","login","username","password","post","process","env","REACT_APP_API_URL","withCredentials","then","response","data","sessionStorage","setItem","catch","error","console","log","register","email","logout"],"mappings":";;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,gBAAGF,aAAa,EAAjC,C,CACA;AACA;;AACA,OAAO,SAASG,WAAT,OAAmC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACxC,QAAMC,IAAI,GAAGC,cAAc,EAA3B;AACA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED,IAA7B;AAAA,cAAoCD;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CACD;AACA;;GALgBD,W;UACDG,c;;;KADCH,W;AAMhB,OAAO,MAAMI,OAAO,GAAG,MAAM;AAAA;;AAC3B,SAAOR,UAAU,CAACG,WAAD,CAAjB;AACD,CAFM,C,CAGP;;IAHaK,O;;AAIb,SAASD,cAAT,GAA0B;AAAA;;AACxB,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;;AAEA,QAAMa,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpCX,IAAAA,KAAK,CACFY,IADH,CAEIC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,cAFpC,EAGI;AACEL,MAAAA,QAAQ,EAAEA,QADZ;AAEEC,MAAAA,QAAQ,EAAEA;AAFZ,KAHJ,EAOI;AAAEK,MAAAA,eAAe,EAAE;AAAnB,KAPJ,EASGC,IATH,CASQ,UAAUC,QAAV,EAAoB;AACxB;AACAV,MAAAA,OAAO,CAACU,QAAQ,CAACC,IAAV,CAAP,CAFwB,CAGxB;;AACAC,MAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+Bd,IAA/B;AAEA,aAAOA,IAAP;AACD,KAhBH,EAiBGe,KAjBH,CAiBS,UAAUC,KAAV,EAAiB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,KAnBH;AAoBD,GArBD;;AAsBA,QAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQhB,QAAR,KAAqB;AACpCH,IAAAA,OAAO,CAAC,QAAD,CAAP;AACA,WAAO,EAAP,CAFoC,CAGpC;AACD,GAJD;;AAKA,QAAMoB,MAAM,GAAG,MAAM;AACnBpB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,WAAO,EAAP;AACD,GAJD;;AAMA5B,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;;AACA,QAAIA,IAAJ,EAAU;AACRiB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD;AACF,GAPQ,EAON,EAPM,CAAT,CApCwB,CA6CxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO;AACLlB,IAAAA,IADK;AAELE,IAAAA,KAFK;AAGLmB,IAAAA,MAHK;AAILF,IAAAA;AAJK,GAAP;AAMD;;IAnEQrB,c","sourcesContent":["// from https://usehooks.com/useAuth/\n\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport axios from \"axios\";\n\nconst authContext = createContext();\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  const login = (username, password) => {\n    axios\n      .post(\n        process.env.REACT_APP_API_URL + \"/users/login\",\n        {\n          username: username,\n          password: password,\n        },\n        { withCredentials: true }\n      )\n      .then(function (response) {\n        // successfully logged in\n        setUser(response.data);\n        // Assign value to a key\n        sessionStorage.setItem(\"user\", user);\n\n        return user;\n      })\n      .catch(function (error) {\n        console.log(\"use-auth: Login Failed\");\n      });\n  };\n  const register = (email, password) => {\n    setUser(\"eythor\");\n    return \"\";\n    //return user\n  };\n  const logout = () => {\n    setUser(null);\n    console.log(\"use-auth: logging out\");\n    return \"\";\n  };\n\n  useEffect(() => {\n    console.log(user);\n    if (user) {\n      console.log(\"We are logged in\");\n    } else {\n      console.log(\"We are not logged in\");\n    }\n  }, []);\n\n  // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n  //   useEffect(() => {\n  //     const unsubscribe = unsib((user) => {\n  //       if (user) {\n  //         setUser(user);\n  //       } else {\n  //         setUser(false);\n  //       }\n  //     });\n  //     // Cleanup subscription on unmount\n  //     return () => unsubscribe();\n  //   }, []);\n  // Return the user object and auth methods\n  return {\n    user,\n    login,\n    logout,\n    register,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}