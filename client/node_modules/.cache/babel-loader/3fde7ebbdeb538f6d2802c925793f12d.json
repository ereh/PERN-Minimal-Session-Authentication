{"ast":null,"code":"var _jsxFileName = \"/Users/eruei/repo/euler/client/src/utils/use-auth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authContext = /*#__PURE__*/createContext(); // Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\n\nexport function ProvideAuth(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const auth = useProvideAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\n_s(ProvideAuth, \"XNU4Jn8u4aVzJknlKOHFJq03xMo=\", false, function () {\n  return [useProvideAuth];\n});\n\n_c = ProvideAuth;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useProvideAuth() {\n  _s3();\n\n  const [user, setUser] = useState(null);\n\n  const signin = (email, password) => {\n    setUser(\"eythor\");\n    return user; //return user\n  };\n\n  const signup = (email, password) => {\n    setUser(\"eythor\");\n    return user; //return user\n  };\n\n  const signout = () => {\n    setUser(null);\n    return user;\n  }; // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n  //   useEffect(() => {\n  //     const unsubscribe = unsib((user) => {\n  //       if (user) {\n  //         setUser(user);\n  //       } else {\n  //         setUser(false);\n  //       }\n  //     });\n  //     // Cleanup subscription on unmount\n  //     return () => unsubscribe();\n  //   }, []);\n  // Return the user object and auth methods\n\n\n  return {\n    user,\n    signin,\n    signup,\n    signout\n  };\n}\n\n_s3(useProvideAuth, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvideAuth\");","map":{"version":3,"sources":["/Users/eruei/repo/euler/client/src/utils/use-auth.js"],"names":["React","useState","useEffect","useContext","createContext","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","signin","email","password","signup","signout"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;;AAEA,MAAMC,WAAW,gBAAGD,aAAa,EAAjC,C,CACA;AACA;;AACA,OAAO,SAASE,WAAT,OAAmC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACxC,QAAMC,IAAI,GAAGC,cAAc,EAA3B;AACA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED,IAA7B;AAAA,cAAoCD;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CACD;AACA;;GALgBD,W;UACDG,c;;;KADCH,W;AAMhB,OAAO,MAAMI,OAAO,GAAG,MAAM;AAAA;;AAC3B,SAAOP,UAAU,CAACE,WAAD,CAAjB;AACD,CAFM,C,CAGP;;IAHaK,O;;AAIb,SAASD,cAAT,GAA0B;AAAA;;AACxB,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;;AAEA,QAAMY,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAClCH,IAAAA,OAAO,CAAC,QAAD,CAAP;AACA,WAAOD,IAAP,CAFkC,CAGlC;AACD,GAJD;;AAKA,QAAMK,MAAM,GAAG,CAACF,KAAD,EAAQC,QAAR,KAAqB;AAClCH,IAAAA,OAAO,CAAC,QAAD,CAAP;AACA,WAAOD,IAAP,CAFkC,CAGlC;AACD,GAJD;;AAKA,QAAMM,OAAO,GAAG,MAAM;AACpBL,IAAAA,OAAO,CAAC,IAAD,CAAP;AACA,WAAOD,IAAP;AACD,GAHD,CAbwB,CAkBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAO;AACLA,IAAAA,IADK;AAELE,IAAAA,MAFK;AAGLG,IAAAA,MAHK;AAILC,IAAAA;AAJK,GAAP;AAMD;;IAxCQR,c","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\n\nconst authContext = createContext();\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  const signin = (email, password) => {\n    setUser(\"eythor\");\n    return user;\n    //return user\n  };\n  const signup = (email, password) => {\n    setUser(\"eythor\");\n    return user;\n    //return user\n  };\n  const signout = () => {\n    setUser(null);\n    return user;\n  };\n\n  // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n  //   useEffect(() => {\n  //     const unsubscribe = unsib((user) => {\n  //       if (user) {\n  //         setUser(user);\n  //       } else {\n  //         setUser(false);\n  //       }\n  //     });\n  //     // Cleanup subscription on unmount\n  //     return () => unsubscribe();\n  //   }, []);\n  // Return the user object and auth methods\n  return {\n    user,\n    signin,\n    signup,\n    signout,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}